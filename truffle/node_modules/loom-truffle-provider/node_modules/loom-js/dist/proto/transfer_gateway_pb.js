/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_loom_pb = require('../proto/loom_pb.js');
goog.exportSymbol('proto.TransferGatewayAddContractMappingRequest', null, global);
goog.exportSymbol('proto.TransferGatewayConfirmWithdrawalReceiptRequest', null, global);
goog.exportSymbol('proto.TransferGatewayContractMappingConfirmed', null, global);
goog.exportSymbol('proto.TransferGatewayGetUnclaimedTokensRequest', null, global);
goog.exportSymbol('proto.TransferGatewayGetUnclaimedTokensResponse', null, global);
goog.exportSymbol('proto.TransferGatewayReclaimContractTokensRequest', null, global);
goog.exportSymbol('proto.TransferGatewayReclaimDepositorTokensRequest', null, global);
goog.exportSymbol('proto.TransferGatewayTokenAmount', null, global);
goog.exportSymbol('proto.TransferGatewayTokenKind', null, global);
goog.exportSymbol('proto.TransferGatewayTokenWithdrawalSigned', null, global);
goog.exportSymbol('proto.TransferGatewayUnclaimedToken', null, global);
goog.exportSymbol('proto.TransferGatewayWithdrawETHRequest', null, global);
goog.exportSymbol('proto.TransferGatewayWithdrawLoomCoinRequest', null, global);
goog.exportSymbol('proto.TransferGatewayWithdrawTokenRequest', null, global);
goog.exportSymbol('proto.TransferGatewayWithdrawalReceipt', null, global);
goog.exportSymbol('proto.TransferGatewayWithdrawalReceiptRequest', null, global);
goog.exportSymbol('proto.TransferGatewayWithdrawalReceiptResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayWithdrawalReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayWithdrawalReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayWithdrawalReceipt.displayName = 'proto.TransferGatewayWithdrawalReceipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayWithdrawalReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayWithdrawalReceipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawalReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenOwner: (f = msg.getTokenOwner()) && proto_loom_pb.Address.toObject(includeInstance, f),
    tokenContract: (f = msg.getTokenContract()) && proto_loom_pb.Address.toObject(includeInstance, f),
    tokenKind: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tokenId: (f = msg.getTokenId()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    tokenAmount: (f = msg.getTokenAmount()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    withdrawalNonce: jspb.Message.getFieldWithDefault(msg, 6, 0),
    oracleSignature: msg.getOracleSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayWithdrawalReceipt}
 */
proto.TransferGatewayWithdrawalReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayWithdrawalReceipt;
  return proto.TransferGatewayWithdrawalReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayWithdrawalReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayWithdrawalReceipt}
 */
proto.TransferGatewayWithdrawalReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setTokenOwner(value);
      break;
    case 2:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setTokenContract(value);
      break;
    case 3:
      var value = /** @type {!proto.TransferGatewayTokenKind} */ (reader.readEnum());
      msg.setTokenKind(value);
      break;
    case 4:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setTokenId(value);
      break;
    case 5:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setTokenAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWithdrawalNonce(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOracleSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayWithdrawalReceipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayWithdrawalReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawalReceipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTokenContract();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTokenKind();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTokenId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = message.getTokenAmount();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawalNonce();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getOracleSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional Address token_owner = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.getTokenOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayWithdrawalReceipt.prototype.setTokenOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayWithdrawalReceipt.prototype.clearTokenOwner = function() {
  this.setTokenOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.hasTokenOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address token_contract = 2;
 * @return {?proto.Address}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.getTokenContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayWithdrawalReceipt.prototype.setTokenContract = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TransferGatewayWithdrawalReceipt.prototype.clearTokenContract = function() {
  this.setTokenContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.hasTokenContract = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TransferGatewayTokenKind token_kind = 3;
 * @return {!proto.TransferGatewayTokenKind}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.getTokenKind = function() {
  return /** @type {!proto.TransferGatewayTokenKind} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.TransferGatewayTokenKind} value */
proto.TransferGatewayWithdrawalReceipt.prototype.setTokenKind = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional BigUInt token_id = 4;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.getTokenId = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 4));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayWithdrawalReceipt.prototype.setTokenId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.TransferGatewayWithdrawalReceipt.prototype.clearTokenId = function() {
  this.setTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.hasTokenId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BigUInt token_amount = 5;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.getTokenAmount = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 5));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayWithdrawalReceipt.prototype.setTokenAmount = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.TransferGatewayWithdrawalReceipt.prototype.clearTokenAmount = function() {
  this.setTokenAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.hasTokenAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 withdrawal_nonce = 6;
 * @return {number}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.getWithdrawalNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.TransferGatewayWithdrawalReceipt.prototype.setWithdrawalNonce = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes oracle_signature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.getOracleSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes oracle_signature = 7;
 * This is a type-conversion wrapper around `getOracleSignature()`
 * @return {string}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.getOracleSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOracleSignature()));
};


/**
 * optional bytes oracle_signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOracleSignature()`
 * @return {!Uint8Array}
 */
proto.TransferGatewayWithdrawalReceipt.prototype.getOracleSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOracleSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.TransferGatewayWithdrawalReceipt.prototype.setOracleSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayContractMappingConfirmed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayContractMappingConfirmed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayContractMappingConfirmed.displayName = 'proto.TransferGatewayContractMappingConfirmed';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayContractMappingConfirmed.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayContractMappingConfirmed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayContractMappingConfirmed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayContractMappingConfirmed.toObject = function(includeInstance, msg) {
  var f, obj = {
    foreignContract: (f = msg.getForeignContract()) && proto_loom_pb.Address.toObject(includeInstance, f),
    localContract: (f = msg.getLocalContract()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayContractMappingConfirmed}
 */
proto.TransferGatewayContractMappingConfirmed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayContractMappingConfirmed;
  return proto.TransferGatewayContractMappingConfirmed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayContractMappingConfirmed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayContractMappingConfirmed}
 */
proto.TransferGatewayContractMappingConfirmed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setForeignContract(value);
      break;
    case 2:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setLocalContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayContractMappingConfirmed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayContractMappingConfirmed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayContractMappingConfirmed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayContractMappingConfirmed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForeignContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getLocalContract();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address foreign_contract = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayContractMappingConfirmed.prototype.getForeignContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayContractMappingConfirmed.prototype.setForeignContract = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayContractMappingConfirmed.prototype.clearForeignContract = function() {
  this.setForeignContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayContractMappingConfirmed.prototype.hasForeignContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address local_contract = 2;
 * @return {?proto.Address}
 */
proto.TransferGatewayContractMappingConfirmed.prototype.getLocalContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayContractMappingConfirmed.prototype.setLocalContract = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TransferGatewayContractMappingConfirmed.prototype.clearLocalContract = function() {
  this.setLocalContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayContractMappingConfirmed.prototype.hasLocalContract = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayTokenWithdrawalSigned = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayTokenWithdrawalSigned, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayTokenWithdrawalSigned.displayName = 'proto.TransferGatewayTokenWithdrawalSigned';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayTokenWithdrawalSigned.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayTokenWithdrawalSigned} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayTokenWithdrawalSigned.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenOwner: (f = msg.getTokenOwner()) && proto_loom_pb.Address.toObject(includeInstance, f),
    tokenContract: (f = msg.getTokenContract()) && proto_loom_pb.Address.toObject(includeInstance, f),
    tokenKind: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tokenId: (f = msg.getTokenId()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    tokenAmount: (f = msg.getTokenAmount()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayTokenWithdrawalSigned}
 */
proto.TransferGatewayTokenWithdrawalSigned.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayTokenWithdrawalSigned;
  return proto.TransferGatewayTokenWithdrawalSigned.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayTokenWithdrawalSigned} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayTokenWithdrawalSigned}
 */
proto.TransferGatewayTokenWithdrawalSigned.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setTokenOwner(value);
      break;
    case 2:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setTokenContract(value);
      break;
    case 3:
      var value = /** @type {!proto.TransferGatewayTokenKind} */ (reader.readEnum());
      msg.setTokenKind(value);
      break;
    case 4:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setTokenId(value);
      break;
    case 5:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setTokenAmount(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayTokenWithdrawalSigned.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayTokenWithdrawalSigned} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayTokenWithdrawalSigned.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTokenContract();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTokenKind();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTokenId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = message.getTokenAmount();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional Address token_owner = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.getTokenOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayTokenWithdrawalSigned.prototype.setTokenOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayTokenWithdrawalSigned.prototype.clearTokenOwner = function() {
  this.setTokenOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.hasTokenOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address token_contract = 2;
 * @return {?proto.Address}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.getTokenContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayTokenWithdrawalSigned.prototype.setTokenContract = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TransferGatewayTokenWithdrawalSigned.prototype.clearTokenContract = function() {
  this.setTokenContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.hasTokenContract = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TransferGatewayTokenKind token_kind = 3;
 * @return {!proto.TransferGatewayTokenKind}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.getTokenKind = function() {
  return /** @type {!proto.TransferGatewayTokenKind} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.TransferGatewayTokenKind} value */
proto.TransferGatewayTokenWithdrawalSigned.prototype.setTokenKind = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional BigUInt token_id = 4;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.getTokenId = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 4));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayTokenWithdrawalSigned.prototype.setTokenId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.TransferGatewayTokenWithdrawalSigned.prototype.clearTokenId = function() {
  this.setTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.hasTokenId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BigUInt token_amount = 5;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.getTokenAmount = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 5));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayTokenWithdrawalSigned.prototype.setTokenAmount = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.TransferGatewayTokenWithdrawalSigned.prototype.clearTokenAmount = function() {
  this.setTokenAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.hasTokenAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes sig = 6;
 * @return {!(string|Uint8Array)}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes sig = 6;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.TransferGatewayTokenWithdrawalSigned.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.TransferGatewayTokenWithdrawalSigned.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayAddContractMappingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayAddContractMappingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayAddContractMappingRequest.displayName = 'proto.TransferGatewayAddContractMappingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayAddContractMappingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayAddContractMappingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayAddContractMappingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    foreignContract: (f = msg.getForeignContract()) && proto_loom_pb.Address.toObject(includeInstance, f),
    localContract: (f = msg.getLocalContract()) && proto_loom_pb.Address.toObject(includeInstance, f),
    foreignContractCreatorSig: msg.getForeignContractCreatorSig_asB64(),
    foreignContractTxHash: msg.getForeignContractTxHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayAddContractMappingRequest}
 */
proto.TransferGatewayAddContractMappingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayAddContractMappingRequest;
  return proto.TransferGatewayAddContractMappingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayAddContractMappingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayAddContractMappingRequest}
 */
proto.TransferGatewayAddContractMappingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setForeignContract(value);
      break;
    case 2:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setLocalContract(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setForeignContractCreatorSig(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setForeignContractTxHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayAddContractMappingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayAddContractMappingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayAddContractMappingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForeignContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getLocalContract();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getForeignContractCreatorSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getForeignContractTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional Address foreign_contract = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.getForeignContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayAddContractMappingRequest.prototype.setForeignContract = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayAddContractMappingRequest.prototype.clearForeignContract = function() {
  this.setForeignContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.hasForeignContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address local_contract = 2;
 * @return {?proto.Address}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.getLocalContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayAddContractMappingRequest.prototype.setLocalContract = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TransferGatewayAddContractMappingRequest.prototype.clearLocalContract = function() {
  this.setLocalContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.hasLocalContract = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes foreign_contract_creator_sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.getForeignContractCreatorSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes foreign_contract_creator_sig = 3;
 * This is a type-conversion wrapper around `getForeignContractCreatorSig()`
 * @return {string}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.getForeignContractCreatorSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getForeignContractCreatorSig()));
};


/**
 * optional bytes foreign_contract_creator_sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getForeignContractCreatorSig()`
 * @return {!Uint8Array}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.getForeignContractCreatorSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getForeignContractCreatorSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.TransferGatewayAddContractMappingRequest.prototype.setForeignContractCreatorSig = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes foreign_contract_tx_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.getForeignContractTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes foreign_contract_tx_hash = 4;
 * This is a type-conversion wrapper around `getForeignContractTxHash()`
 * @return {string}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.getForeignContractTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getForeignContractTxHash()));
};


/**
 * optional bytes foreign_contract_tx_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getForeignContractTxHash()`
 * @return {!Uint8Array}
 */
proto.TransferGatewayAddContractMappingRequest.prototype.getForeignContractTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getForeignContractTxHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.TransferGatewayAddContractMappingRequest.prototype.setForeignContractTxHash = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayReclaimDepositorTokensRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TransferGatewayReclaimDepositorTokensRequest.repeatedFields_, null);
};
goog.inherits(proto.TransferGatewayReclaimDepositorTokensRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayReclaimDepositorTokensRequest.displayName = 'proto.TransferGatewayReclaimDepositorTokensRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TransferGatewayReclaimDepositorTokensRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayReclaimDepositorTokensRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayReclaimDepositorTokensRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayReclaimDepositorTokensRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayReclaimDepositorTokensRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    depositorsList: jspb.Message.toObjectList(msg.getDepositorsList(),
    proto_loom_pb.Address.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayReclaimDepositorTokensRequest}
 */
proto.TransferGatewayReclaimDepositorTokensRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayReclaimDepositorTokensRequest;
  return proto.TransferGatewayReclaimDepositorTokensRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayReclaimDepositorTokensRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayReclaimDepositorTokensRequest}
 */
proto.TransferGatewayReclaimDepositorTokensRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.addDepositors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayReclaimDepositorTokensRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayReclaimDepositorTokensRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayReclaimDepositorTokensRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayReclaimDepositorTokensRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepositorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Address depositors = 1;
 * @return {!Array.<!proto.Address>}
 */
proto.TransferGatewayReclaimDepositorTokensRequest.prototype.getDepositorsList = function() {
  return /** @type{!Array.<!proto.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {!Array.<!proto.Address>} value */
proto.TransferGatewayReclaimDepositorTokensRequest.prototype.setDepositorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Address}
 */
proto.TransferGatewayReclaimDepositorTokensRequest.prototype.addDepositors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Address, opt_index);
};


proto.TransferGatewayReclaimDepositorTokensRequest.prototype.clearDepositorsList = function() {
  this.setDepositorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayReclaimContractTokensRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayReclaimContractTokensRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayReclaimContractTokensRequest.displayName = 'proto.TransferGatewayReclaimContractTokensRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayReclaimContractTokensRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayReclaimContractTokensRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayReclaimContractTokensRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayReclaimContractTokensRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenContract: (f = msg.getTokenContract()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayReclaimContractTokensRequest}
 */
proto.TransferGatewayReclaimContractTokensRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayReclaimContractTokensRequest;
  return proto.TransferGatewayReclaimContractTokensRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayReclaimContractTokensRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayReclaimContractTokensRequest}
 */
proto.TransferGatewayReclaimContractTokensRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setTokenContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayReclaimContractTokensRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayReclaimContractTokensRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayReclaimContractTokensRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayReclaimContractTokensRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address token_contract = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayReclaimContractTokensRequest.prototype.getTokenContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayReclaimContractTokensRequest.prototype.setTokenContract = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayReclaimContractTokensRequest.prototype.clearTokenContract = function() {
  this.setTokenContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayReclaimContractTokensRequest.prototype.hasTokenContract = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayWithdrawTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayWithdrawTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayWithdrawTokenRequest.displayName = 'proto.TransferGatewayWithdrawTokenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayWithdrawTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayWithdrawTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenContract: (f = msg.getTokenContract()) && proto_loom_pb.Address.toObject(includeInstance, f),
    tokenKind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tokenId: (f = msg.getTokenId()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    tokenAmount: (f = msg.getTokenAmount()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    recipient: (f = msg.getRecipient()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayWithdrawTokenRequest}
 */
proto.TransferGatewayWithdrawTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayWithdrawTokenRequest;
  return proto.TransferGatewayWithdrawTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayWithdrawTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayWithdrawTokenRequest}
 */
proto.TransferGatewayWithdrawTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setTokenContract(value);
      break;
    case 2:
      var value = /** @type {!proto.TransferGatewayTokenKind} */ (reader.readEnum());
      msg.setTokenKind(value);
      break;
    case 3:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setTokenId(value);
      break;
    case 4:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setTokenAmount(value);
      break;
    case 5:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayWithdrawTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayWithdrawTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTokenKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTokenId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = message.getTokenAmount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address token_contract = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.getTokenContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayWithdrawTokenRequest.prototype.setTokenContract = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayWithdrawTokenRequest.prototype.clearTokenContract = function() {
  this.setTokenContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.hasTokenContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransferGatewayTokenKind token_kind = 2;
 * @return {!proto.TransferGatewayTokenKind}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.getTokenKind = function() {
  return /** @type {!proto.TransferGatewayTokenKind} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.TransferGatewayTokenKind} value */
proto.TransferGatewayWithdrawTokenRequest.prototype.setTokenKind = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional BigUInt token_id = 3;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.getTokenId = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 3));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayWithdrawTokenRequest.prototype.setTokenId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TransferGatewayWithdrawTokenRequest.prototype.clearTokenId = function() {
  this.setTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.hasTokenId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BigUInt token_amount = 4;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.getTokenAmount = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 4));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayWithdrawTokenRequest.prototype.setTokenAmount = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.TransferGatewayWithdrawTokenRequest.prototype.clearTokenAmount = function() {
  this.setTokenAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.hasTokenAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Address recipient = 5;
 * @return {?proto.Address}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.getRecipient = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 5));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayWithdrawTokenRequest.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.TransferGatewayWithdrawTokenRequest.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawTokenRequest.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayWithdrawETHRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayWithdrawETHRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayWithdrawETHRequest.displayName = 'proto.TransferGatewayWithdrawETHRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayWithdrawETHRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayWithdrawETHRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayWithdrawETHRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawETHRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    mainnetGateway: (f = msg.getMainnetGateway()) && proto_loom_pb.Address.toObject(includeInstance, f),
    recipient: (f = msg.getRecipient()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayWithdrawETHRequest}
 */
proto.TransferGatewayWithdrawETHRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayWithdrawETHRequest;
  return proto.TransferGatewayWithdrawETHRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayWithdrawETHRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayWithdrawETHRequest}
 */
proto.TransferGatewayWithdrawETHRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setMainnetGateway(value);
      break;
    case 3:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayWithdrawETHRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayWithdrawETHRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayWithdrawETHRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawETHRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = message.getMainnetGateway();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional BigUInt amount = 1;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayWithdrawETHRequest.prototype.getAmount = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 1));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayWithdrawETHRequest.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayWithdrawETHRequest.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawETHRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address mainnet_gateway = 2;
 * @return {?proto.Address}
 */
proto.TransferGatewayWithdrawETHRequest.prototype.getMainnetGateway = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayWithdrawETHRequest.prototype.setMainnetGateway = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TransferGatewayWithdrawETHRequest.prototype.clearMainnetGateway = function() {
  this.setMainnetGateway(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawETHRequest.prototype.hasMainnetGateway = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Address recipient = 3;
 * @return {?proto.Address}
 */
proto.TransferGatewayWithdrawETHRequest.prototype.getRecipient = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 3));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayWithdrawETHRequest.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TransferGatewayWithdrawETHRequest.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawETHRequest.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayWithdrawLoomCoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayWithdrawLoomCoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayWithdrawLoomCoinRequest.displayName = 'proto.TransferGatewayWithdrawLoomCoinRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayWithdrawLoomCoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayWithdrawLoomCoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawLoomCoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    tokenContract: (f = msg.getTokenContract()) && proto_loom_pb.Address.toObject(includeInstance, f),
    recipient: (f = msg.getRecipient()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayWithdrawLoomCoinRequest}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayWithdrawLoomCoinRequest;
  return proto.TransferGatewayWithdrawLoomCoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayWithdrawLoomCoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayWithdrawLoomCoinRequest}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setTokenContract(value);
      break;
    case 3:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayWithdrawLoomCoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayWithdrawLoomCoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawLoomCoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = message.getTokenContract();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional BigUInt amount = 1;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.getAmount = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 1));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayWithdrawLoomCoinRequest.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address token_contract = 2;
 * @return {?proto.Address}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.getTokenContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.setTokenContract = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TransferGatewayWithdrawLoomCoinRequest.prototype.clearTokenContract = function() {
  this.setTokenContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.hasTokenContract = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Address recipient = 3;
 * @return {?proto.Address}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.getRecipient = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 3));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TransferGatewayWithdrawLoomCoinRequest.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawLoomCoinRequest.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayWithdrawalReceiptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayWithdrawalReceiptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayWithdrawalReceiptRequest.displayName = 'proto.TransferGatewayWithdrawalReceiptRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayWithdrawalReceiptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayWithdrawalReceiptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayWithdrawalReceiptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawalReceiptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayWithdrawalReceiptRequest}
 */
proto.TransferGatewayWithdrawalReceiptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayWithdrawalReceiptRequest;
  return proto.TransferGatewayWithdrawalReceiptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayWithdrawalReceiptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayWithdrawalReceiptRequest}
 */
proto.TransferGatewayWithdrawalReceiptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayWithdrawalReceiptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayWithdrawalReceiptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayWithdrawalReceiptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawalReceiptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address owner = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayWithdrawalReceiptRequest.prototype.getOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayWithdrawalReceiptRequest.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayWithdrawalReceiptRequest.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawalReceiptRequest.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayWithdrawalReceiptResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayWithdrawalReceiptResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayWithdrawalReceiptResponse.displayName = 'proto.TransferGatewayWithdrawalReceiptResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayWithdrawalReceiptResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayWithdrawalReceiptResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayWithdrawalReceiptResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawalReceiptResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    receipt: (f = msg.getReceipt()) && proto.TransferGatewayWithdrawalReceipt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayWithdrawalReceiptResponse}
 */
proto.TransferGatewayWithdrawalReceiptResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayWithdrawalReceiptResponse;
  return proto.TransferGatewayWithdrawalReceiptResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayWithdrawalReceiptResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayWithdrawalReceiptResponse}
 */
proto.TransferGatewayWithdrawalReceiptResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TransferGatewayWithdrawalReceipt;
      reader.readMessage(value,proto.TransferGatewayWithdrawalReceipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayWithdrawalReceiptResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayWithdrawalReceiptResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayWithdrawalReceiptResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayWithdrawalReceiptResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TransferGatewayWithdrawalReceipt.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransferGatewayWithdrawalReceipt receipt = 1;
 * @return {?proto.TransferGatewayWithdrawalReceipt}
 */
proto.TransferGatewayWithdrawalReceiptResponse.prototype.getReceipt = function() {
  return /** @type{?proto.TransferGatewayWithdrawalReceipt} */ (
    jspb.Message.getWrapperField(this, proto.TransferGatewayWithdrawalReceipt, 1));
};


/** @param {?proto.TransferGatewayWithdrawalReceipt|undefined} value */
proto.TransferGatewayWithdrawalReceiptResponse.prototype.setReceipt = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayWithdrawalReceiptResponse.prototype.clearReceipt = function() {
  this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayWithdrawalReceiptResponse.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayConfirmWithdrawalReceiptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayConfirmWithdrawalReceiptRequest.displayName = 'proto.TransferGatewayConfirmWithdrawalReceiptRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayConfirmWithdrawalReceiptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayConfirmWithdrawalReceiptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenOwner: (f = msg.getTokenOwner()) && proto_loom_pb.Address.toObject(includeInstance, f),
    oracleSignature: msg.getOracleSignature_asB64(),
    withdrawalHash: msg.getWithdrawalHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayConfirmWithdrawalReceiptRequest}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayConfirmWithdrawalReceiptRequest;
  return proto.TransferGatewayConfirmWithdrawalReceiptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayConfirmWithdrawalReceiptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayConfirmWithdrawalReceiptRequest}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setTokenOwner(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOracleSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWithdrawalHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayConfirmWithdrawalReceiptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayConfirmWithdrawalReceiptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getOracleSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getWithdrawalHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional Address token_owner = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.getTokenOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.setTokenOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.clearTokenOwner = function() {
  this.setTokenOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.hasTokenOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes oracle_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.getOracleSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes oracle_signature = 2;
 * This is a type-conversion wrapper around `getOracleSignature()`
 * @return {string}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.getOracleSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOracleSignature()));
};


/**
 * optional bytes oracle_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOracleSignature()`
 * @return {!Uint8Array}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.getOracleSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOracleSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.setOracleSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes withdrawal_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.getWithdrawalHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes withdrawal_hash = 3;
 * This is a type-conversion wrapper around `getWithdrawalHash()`
 * @return {string}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.getWithdrawalHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWithdrawalHash()));
};


/**
 * optional bytes withdrawal_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWithdrawalHash()`
 * @return {!Uint8Array}
 */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.getWithdrawalHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWithdrawalHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.TransferGatewayConfirmWithdrawalReceiptRequest.prototype.setWithdrawalHash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayTokenAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayTokenAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayTokenAmount.displayName = 'proto.TransferGatewayTokenAmount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayTokenAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayTokenAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayTokenAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayTokenAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenId: (f = msg.getTokenId()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    tokenAmount: (f = msg.getTokenAmount()) && proto_loom_pb.BigUInt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayTokenAmount}
 */
proto.TransferGatewayTokenAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayTokenAmount;
  return proto.TransferGatewayTokenAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayTokenAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayTokenAmount}
 */
proto.TransferGatewayTokenAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setTokenId(value);
      break;
    case 2:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setTokenAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayTokenAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayTokenAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayTokenAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayTokenAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = message.getTokenAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
};


/**
 * optional BigUInt token_id = 1;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayTokenAmount.prototype.getTokenId = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 1));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayTokenAmount.prototype.setTokenId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayTokenAmount.prototype.clearTokenId = function() {
  this.setTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayTokenAmount.prototype.hasTokenId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BigUInt token_amount = 2;
 * @return {?proto.BigUInt}
 */
proto.TransferGatewayTokenAmount.prototype.getTokenAmount = function() {
  return /** @type{?proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 2));
};


/** @param {?proto.BigUInt|undefined} value */
proto.TransferGatewayTokenAmount.prototype.setTokenAmount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TransferGatewayTokenAmount.prototype.clearTokenAmount = function() {
  this.setTokenAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayTokenAmount.prototype.hasTokenAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayUnclaimedToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TransferGatewayUnclaimedToken.repeatedFields_, null);
};
goog.inherits(proto.TransferGatewayUnclaimedToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayUnclaimedToken.displayName = 'proto.TransferGatewayUnclaimedToken';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TransferGatewayUnclaimedToken.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayUnclaimedToken.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayUnclaimedToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayUnclaimedToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayUnclaimedToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenContract: (f = msg.getTokenContract()) && proto_loom_pb.Address.toObject(includeInstance, f),
    tokenKind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amountsList: jspb.Message.toObjectList(msg.getAmountsList(),
    proto.TransferGatewayTokenAmount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayUnclaimedToken}
 */
proto.TransferGatewayUnclaimedToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayUnclaimedToken;
  return proto.TransferGatewayUnclaimedToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayUnclaimedToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayUnclaimedToken}
 */
proto.TransferGatewayUnclaimedToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setTokenContract(value);
      break;
    case 2:
      var value = /** @type {!proto.TransferGatewayTokenKind} */ (reader.readEnum());
      msg.setTokenKind(value);
      break;
    case 3:
      var value = new proto.TransferGatewayTokenAmount;
      reader.readMessage(value,proto.TransferGatewayTokenAmount.deserializeBinaryFromReader);
      msg.addAmounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayUnclaimedToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayUnclaimedToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayUnclaimedToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayUnclaimedToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTokenKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAmountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.TransferGatewayTokenAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address token_contract = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayUnclaimedToken.prototype.getTokenContract = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayUnclaimedToken.prototype.setTokenContract = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayUnclaimedToken.prototype.clearTokenContract = function() {
  this.setTokenContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayUnclaimedToken.prototype.hasTokenContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransferGatewayTokenKind token_kind = 2;
 * @return {!proto.TransferGatewayTokenKind}
 */
proto.TransferGatewayUnclaimedToken.prototype.getTokenKind = function() {
  return /** @type {!proto.TransferGatewayTokenKind} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.TransferGatewayTokenKind} value */
proto.TransferGatewayUnclaimedToken.prototype.setTokenKind = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated TransferGatewayTokenAmount amounts = 3;
 * @return {!Array.<!proto.TransferGatewayTokenAmount>}
 */
proto.TransferGatewayUnclaimedToken.prototype.getAmountsList = function() {
  return /** @type{!Array.<!proto.TransferGatewayTokenAmount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TransferGatewayTokenAmount, 3));
};


/** @param {!Array.<!proto.TransferGatewayTokenAmount>} value */
proto.TransferGatewayUnclaimedToken.prototype.setAmountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.TransferGatewayTokenAmount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TransferGatewayTokenAmount}
 */
proto.TransferGatewayUnclaimedToken.prototype.addAmounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.TransferGatewayTokenAmount, opt_index);
};


proto.TransferGatewayUnclaimedToken.prototype.clearAmountsList = function() {
  this.setAmountsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayGetUnclaimedTokensRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferGatewayGetUnclaimedTokensRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayGetUnclaimedTokensRequest.displayName = 'proto.TransferGatewayGetUnclaimedTokensRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayGetUnclaimedTokensRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayGetUnclaimedTokensRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayGetUnclaimedTokensRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayGetUnclaimedTokensRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayGetUnclaimedTokensRequest}
 */
proto.TransferGatewayGetUnclaimedTokensRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayGetUnclaimedTokensRequest;
  return proto.TransferGatewayGetUnclaimedTokensRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayGetUnclaimedTokensRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayGetUnclaimedTokensRequest}
 */
proto.TransferGatewayGetUnclaimedTokensRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayGetUnclaimedTokensRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayGetUnclaimedTokensRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayGetUnclaimedTokensRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayGetUnclaimedTokensRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address owner = 1;
 * @return {?proto.Address}
 */
proto.TransferGatewayGetUnclaimedTokensRequest.prototype.getOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.TransferGatewayGetUnclaimedTokensRequest.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferGatewayGetUnclaimedTokensRequest.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransferGatewayGetUnclaimedTokensRequest.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferGatewayGetUnclaimedTokensResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TransferGatewayGetUnclaimedTokensResponse.repeatedFields_, null);
};
goog.inherits(proto.TransferGatewayGetUnclaimedTokensResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferGatewayGetUnclaimedTokensResponse.displayName = 'proto.TransferGatewayGetUnclaimedTokensResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TransferGatewayGetUnclaimedTokensResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferGatewayGetUnclaimedTokensResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferGatewayGetUnclaimedTokensResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferGatewayGetUnclaimedTokensResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayGetUnclaimedTokensResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unclaimedTokensList: jspb.Message.toObjectList(msg.getUnclaimedTokensList(),
    proto.TransferGatewayUnclaimedToken.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferGatewayGetUnclaimedTokensResponse}
 */
proto.TransferGatewayGetUnclaimedTokensResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferGatewayGetUnclaimedTokensResponse;
  return proto.TransferGatewayGetUnclaimedTokensResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferGatewayGetUnclaimedTokensResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferGatewayGetUnclaimedTokensResponse}
 */
proto.TransferGatewayGetUnclaimedTokensResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TransferGatewayUnclaimedToken;
      reader.readMessage(value,proto.TransferGatewayUnclaimedToken.deserializeBinaryFromReader);
      msg.addUnclaimedTokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferGatewayGetUnclaimedTokensResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferGatewayGetUnclaimedTokensResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferGatewayGetUnclaimedTokensResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferGatewayGetUnclaimedTokensResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnclaimedTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TransferGatewayUnclaimedToken.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransferGatewayUnclaimedToken unclaimed_tokens = 1;
 * @return {!Array.<!proto.TransferGatewayUnclaimedToken>}
 */
proto.TransferGatewayGetUnclaimedTokensResponse.prototype.getUnclaimedTokensList = function() {
  return /** @type{!Array.<!proto.TransferGatewayUnclaimedToken>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TransferGatewayUnclaimedToken, 1));
};


/** @param {!Array.<!proto.TransferGatewayUnclaimedToken>} value */
proto.TransferGatewayGetUnclaimedTokensResponse.prototype.setUnclaimedTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TransferGatewayUnclaimedToken=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TransferGatewayUnclaimedToken}
 */
proto.TransferGatewayGetUnclaimedTokensResponse.prototype.addUnclaimedTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TransferGatewayUnclaimedToken, opt_index);
};


proto.TransferGatewayGetUnclaimedTokensResponse.prototype.clearUnclaimedTokensList = function() {
  this.setUnclaimedTokensList([]);
};


/**
 * @enum {number}
 */
proto.TransferGatewayTokenKind = {
  ETH: 0,
  ERC20: 1,
  ERC721: 2,
  ERC721X: 3,
  LOOMCOIN: 4
};

goog.object.extend(exports, proto);
