'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var path = require('path');
var EventStore = require('orbit-db-eventstore');
var FeedStore = require('orbit-db-feedstore');
var KeyValueStore = require('orbit-db-kvstore');
var CounterStore = require('orbit-db-counterstore');
var DocumentStore = require('orbit-db-docstore');
var Pubsub = require('orbit-db-pubsub');
var Cache = require('orbit-db-cache');
var Keystore = require('orbit-db-keystore');
var Identities = require('orbit-db-identity-provider');
var AccessControllers = require('orbit-db-access-controllers');
var OrbitDBAddress = require('./orbit-db-address');
var createDBManifest = require('./db-manifest');
var exchangeHeads = require('./exchange-heads');

var _require = require('./utils'),
    isDefined = _require.isDefined,
    io = _require.io;

var Logger = require('logplease');
var logger = Logger.create("orbit-db");
Logger.setLogLevel('ERROR');

// Mapping for 'database type' -> Class
var databaseTypes = {
  'counter': CounterStore,
  'eventlog': EventStore,
  'feed': FeedStore,
  'docstore': DocumentStore,
  'keyvalue': KeyValueStore
};

var OrbitDB = function () {
  function OrbitDB(ipfs, identity) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _classCallCheck3.default)(this, OrbitDB);

    if (!isDefined(ipfs)) throw new Error('IPFS is a required argument. See https://github.com/orbitdb/orbit-db/blob/master/API.md#createinstance');

    if (!isDefined(identity)) throw new Error('identity is a required argument. See https://github.com/orbitdb/orbit-db/blob/master/API.md#createinstance');

    this._ipfs = ipfs;
    this.identity = identity;
    this.id = options.peerId;
    this._pubsub = options && options.broker ? new options.broker(this._ipfs) : new Pubsub(this._ipfs, this.id);
    this.directory = options.directory || './orbitdb';
    this.keystore = options.keystore;
    this.cache = options.cache || Cache;
    this.stores = {};
    this._directConnections = {};
    // AccessControllers module can be passed in to enable
    // testing with orbit-db-access-controller
    AccessControllers = options.AccessControllers || AccessControllers;
  }

  (0, _createClass3.default)(OrbitDB, [{
    key: 'feed',


    /* Databases */
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(address) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = (0, _assign2.default)({ create: true, type: 'feed' }, options);
                return _context.abrupt('return', this.open(address, options));

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function feed(_x3) {
        return _ref.apply(this, arguments);
      }

      return feed;
    }()
  }, {
    key: 'log',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = (0, _assign2.default)({ create: true, type: 'eventlog' }, options);
                return _context2.abrupt('return', this.open(address, options));

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function log(_x5) {
        return _ref2.apply(this, arguments);
      }

      return log;
    }()
  }, {
    key: 'eventlog',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(address) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt('return', this.log(address, options));

              case 1:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function eventlog(_x7) {
        return _ref3.apply(this, arguments);
      }

      return eventlog;
    }()
  }, {
    key: 'keyvalue',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(address) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = (0, _assign2.default)({ create: true, type: 'keyvalue' }, options);
                return _context4.abrupt('return', this.open(address, options));

              case 2:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function keyvalue(_x9) {
        return _ref4.apply(this, arguments);
      }

      return keyvalue;
    }()
  }, {
    key: 'kvstore',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(address) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt('return', this.keyvalue(address, options));

              case 1:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function kvstore(_x11) {
        return _ref5.apply(this, arguments);
      }

      return kvstore;
    }()
  }, {
    key: 'counter',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(address) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = (0, _assign2.default)({ create: true, type: 'counter' }, options);
                return _context6.abrupt('return', this.open(address, options));

              case 2:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function counter(_x13) {
        return _ref6.apply(this, arguments);
      }

      return counter;
    }()
  }, {
    key: 'docs',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(address) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                options = (0, _assign2.default)({ create: true, type: 'docstore' }, options);
                return _context7.abrupt('return', this.open(address, options));

              case 2:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function docs(_x15) {
        return _ref7.apply(this, arguments);
      }

      return docs;
    }()
  }, {
    key: 'docstore',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(address) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt('return', this.docs(address, options));

              case 1:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function docstore(_x17) {
        return _ref8.apply(this, arguments);
      }

      return docstore;
    }()
  }, {
    key: 'disconnect',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
        var _this = this;

        var databases, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, db, removeDirectConnect;

        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!this.keystore.close) {
                  _context9.next = 3;
                  break;
                }

                _context9.next = 3;
                return this.keystore.close();

              case 3:

                // Close all open databases
                databases = (0, _values2.default)(this.stores);
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context9.prev = 7;
                _iterator = (0, _getIterator3.default)(databases);

              case 9:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context9.next = 17;
                  break;
                }

                db = _step.value;
                _context9.next = 13;
                return db.close();

              case 13:
                delete this.stores[db.address.toString()];

              case 14:
                _iteratorNormalCompletion = true;
                _context9.next = 9;
                break;

              case 17:
                _context9.next = 23;
                break;

              case 19:
                _context9.prev = 19;
                _context9.t0 = _context9['catch'](7);
                _didIteratorError = true;
                _iteratorError = _context9.t0;

              case 23:
                _context9.prev = 23;
                _context9.prev = 24;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 26:
                _context9.prev = 26;

                if (!_didIteratorError) {
                  _context9.next = 29;
                  break;
                }

                throw _iteratorError;

              case 29:
                return _context9.finish(26);

              case 30:
                return _context9.finish(23);

              case 31:

                // Close a direct connection and remove it from internal state
                removeDirectConnect = function removeDirectConnect(e) {
                  _this._directConnections[e].close();
                  delete _this._directConnections[e];
                };

                // Close all direct connections to peers


                (0, _keys2.default)(this._directConnections).forEach(removeDirectConnect);

                // Disconnect from pubsub

                if (!this._pubsub) {
                  _context9.next = 36;
                  break;
                }

                _context9.next = 36;
                return this._pubsub.disconnect();

              case 36:

                // Remove all databases from the state
                this.stores = {};

              case 37:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this, [[7, 19, 23, 31], [24,, 26, 30]]);
      }));

      function disconnect() {
        return _ref9.apply(this, arguments);
      }

      return disconnect;
    }()

    // Alias for disconnect()

  }, {
    key: 'stop',
    value: function () {
      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
        return _regenerator2.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.disconnect();

              case 2:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function stop() {
        return _ref10.apply(this, arguments);
      }

      return stop;
    }()

    /* Private methods */

  }, {
    key: '_createStore',
    value: function () {
      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(type, address, options) {
        var Store, accessController, cache, opts, store, addr;
        return _regenerator2.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                // Get the type -> class mapping
                Store = databaseTypes[type];

                if (Store) {
                  _context11.next = 3;
                  break;
                }

                throw new Error('Invalid database type \'' + type + '\'');

              case 3:
                accessController = void 0;

                if (!options.accessControllerAddress) {
                  _context11.next = 8;
                  break;
                }

                _context11.next = 7;
                return AccessControllers.resolve(this, options.accessControllerAddress, options.accessController);

              case 7:
                accessController = _context11.sent;

              case 8:
                _context11.next = 10;
                return this._loadCache(this.directory, address);

              case 10:
                cache = _context11.sent;
                opts = (0, _assign2.default)({ replicate: true }, options, {
                  accessController: accessController,
                  keystore: this.keystore,
                  cache: cache,
                  onClose: this._onClose.bind(this)
                });
                store = new Store(this._ipfs, this.identity, address, opts);

                store.events.on('write', this._onWrite.bind(this));
                // ID of the store is the address as a string
                addr = address.toString();

                this.stores[addr] = store;

                // Subscribe to pubsub to get updates from peers,
                // this is what hooks us into the message propagation layer
                // and the p2p network
                if (opts.replicate && this._pubsub) this._pubsub.subscribe(addr, this._onMessage.bind(this), this._onPeerConnected.bind(this));

                return _context11.abrupt('return', store);

              case 18:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function _createStore(_x18, _x19, _x20) {
        return _ref11.apply(this, arguments);
      }

      return _createStore;
    }()

    // Callback for local writes to the database. We the update to pubsub.

  }, {
    key: '_onWrite',
    value: function _onWrite(address, entry, heads) {
      if (!heads) throw new Error("'heads' not defined");
      if (this._pubsub) this._pubsub.publish(address, heads);
    }

    // Callback for receiving a message from the network

  }, {
    key: '_onMessage',
    value: function () {
      var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(address, heads) {
        var store;
        return _regenerator2.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                store = this.stores[address];
                _context12.prev = 1;

                logger.debug('Received ' + heads.length + ' heads for \'' + address + '\':\n', (0, _stringify2.default)(heads.map(function (e) {
                  return e.hash;
                }), null, 2));

                if (!(store && heads && heads.length > 0)) {
                  _context12.next = 6;
                  break;
                }

                _context12.next = 6;
                return store.sync(heads);

              case 6:
                _context12.next = 11;
                break;

              case 8:
                _context12.prev = 8;
                _context12.t0 = _context12['catch'](1);

                logger.error(_context12.t0);

              case 11:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this, [[1, 8]]);
      }));

      function _onMessage(_x21, _x22) {
        return _ref12.apply(this, arguments);
      }

      return _onMessage;
    }()

    // Callback for when a peer connected to a database

  }, {
    key: '_onPeerConnected',
    value: function () {
      var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13(address, peer) {
        var _this2 = this;

        var getStore, getDirectConnection, onChannelCreated, onMessage, channel;
        return _regenerator2.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                logger.debug('New peer \'' + peer + '\' connected to \'' + address + '\'');

                getStore = function getStore(address) {
                  return _this2.stores[address];
                };

                getDirectConnection = function getDirectConnection(peer) {
                  return _this2._directConnections[peer];
                };

                onChannelCreated = function onChannelCreated(channel) {
                  return _this2._directConnections[channel._receiverID] = channel;
                };

                onMessage = function onMessage(address, heads) {
                  return _this2._onMessage(address, heads);
                };

                _context13.next = 7;
                return exchangeHeads(this._ipfs, address, peer, getStore, getDirectConnection, onMessage, onChannelCreated);

              case 7:
                channel = _context13.sent;


                if (getStore(address)) getStore(address).events.emit('peer', peer);

              case 9:
              case 'end':
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function _onPeerConnected(_x23, _x24) {
        return _ref13.apply(this, arguments);
      }

      return _onPeerConnected;
    }()

    // Callback when database was closed

  }, {
    key: '_onClose',
    value: function () {
      var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14(address) {
        return _regenerator2.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                logger.debug('Close ' + address);

                // Unsubscribe from pubsub

                if (!this._pubsub) {
                  _context14.next = 4;
                  break;
                }

                _context14.next = 4;
                return this._pubsub.unsubscribe(address);

              case 4:

                delete this.stores[address];

              case 5:
              case 'end':
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function _onClose(_x25) {
        return _ref14.apply(this, arguments);
      }

      return _onClose;
    }()
  }, {
    key: '_determineAddress',
    value: function () {
      var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(name, type) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var onlyHash = arguments[3];
        var accessControllerAddress, manifestHash;
        return _regenerator2.default.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                if (OrbitDB.isValidType(type)) {
                  _context15.next = 2;
                  break;
                }

                throw new Error('Invalid database type \'' + type + '\'');

              case 2:
                if (!OrbitDBAddress.isValid(name)) {
                  _context15.next = 4;
                  break;
                }

                throw new Error('Given database name is an address. Please give only the name of the database!');

              case 4:

                // Create an AccessController, use IPFS AC as the default
                options.accessController = (0, _assign2.default)({}, { type: 'ipfs' }, options.accessController);
                _context15.next = 7;
                return AccessControllers.create(this, options.accessController.type, options.accessController || {});

              case 7:
                accessControllerAddress = _context15.sent;
                _context15.next = 10;
                return createDBManifest(this._ipfs, name, type, accessControllerAddress, onlyHash);

              case 10:
                manifestHash = _context15.sent;
                return _context15.abrupt('return', OrbitDBAddress.parse(path.join('/orbitdb', manifestHash, name)));

              case 12:
              case 'end':
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function _determineAddress(_x27, _x28) {
        return _ref15.apply(this, arguments);
      }

      return _determineAddress;
    }()

    /* Create and Open databases */

    /*
      options = {
        accessController: { write: [] } // array of keys that can write to this database
        directory: './orbitdb', // directory in which to place the database files
        overwrite: false, // whether we should overwrite the existing database if it exists
      }
    */

  }, {
    key: 'create',
    value: function () {
      var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16(name, type) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var directory, dbAddress, cache, haveDB;
        return _regenerator2.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                logger.debug('create()');

                // The directory to look databases from can be passed in as an option
                directory = options.directory || this.directory;

                logger.debug('Creating database \'' + name + '\' as ' + type + ' in \'' + directory + '\'');

                // Create the database address
                _context16.next = 5;
                return this._determineAddress(name, type, options);

              case 5:
                dbAddress = _context16.sent;
                _context16.next = 8;
                return this._loadCache(directory, dbAddress);

              case 8:
                cache = _context16.sent;
                _context16.next = 11;
                return this._haveLocalData(cache, dbAddress);

              case 11:
                haveDB = _context16.sent;

                if (!(haveDB && !options.overwrite)) {
                  _context16.next = 14;
                  break;
                }

                throw new Error('Database \'' + dbAddress + '\' already exists!');

              case 14:
                _context16.next = 16;
                return this._addManifestToCache(directory, dbAddress);

              case 16:

                logger.debug('Created database \'' + dbAddress + '\'');

                // Open the database
                return _context16.abrupt('return', this.open(dbAddress, options));

              case 18:
              case 'end':
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function create(_x30, _x31) {
        return _ref16.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: 'determineAddress',
    value: function () {
      var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17(name, type) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return _regenerator2.default.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                return _context17.abrupt('return', this._determineAddress(name, type, options, true));

              case 1:
              case 'end':
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function determineAddress(_x33, _x34) {
        return _ref17.apply(this, arguments);
      }

      return determineAddress;
    }()

    /*
        options = {
          localOnly: false // if set to true, throws an error if database can't be found locally
          create: false // whether to create the database
          type: TODO
          overwrite: TODO
         }
     */

  }, {
    key: 'open',
    value: function () {
      var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(address) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var directory, dbAddress, cache, haveDB, manifest;
        return _regenerator2.default.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                logger.debug('open()');

                options = (0, _assign2.default)({ localOnly: false, create: false }, options);
                logger.debug('Open database \'' + address + '\'');

                // The directory to look databases from can be passed in as an option
                directory = options.directory || this.directory;

                logger.debug('Look from \'' + directory + '\'');

                // If address is just the name of database, check the options to crate the database

                if (OrbitDBAddress.isValid(address)) {
                  _context18.next = 17;
                  break;
                }

                if (options.create) {
                  _context18.next = 10;
                  break;
                }

                throw new Error('\'options.create\' set to \'false\'. If you want to create a database, set \'options.create\' to \'true\'.');

              case 10:
                if (!(options.create && !options.type)) {
                  _context18.next = 14;
                  break;
                }

                throw new Error('Database type not provided! Provide a type with \'options.type\' (' + OrbitDB.databaseTypes.join('|') + ')');

              case 14:
                logger.warn('Not a valid OrbitDB address \'' + address + '\', creating the database');
                options.overwrite = options.overwrite ? options.overwrite : true;
                return _context18.abrupt('return', this.create(address, options.type, options));

              case 17:

                // Parse the database address
                dbAddress = OrbitDBAddress.parse(address);

                // Load the locally saved db information

                _context18.next = 20;
                return this._loadCache(directory, dbAddress);

              case 20:
                cache = _context18.sent;
                _context18.next = 23;
                return this._haveLocalData(cache, dbAddress);

              case 23:
                haveDB = _context18.sent;


                logger.debug((haveDB ? 'Found' : 'Didn\'t find') + (' database \'' + dbAddress + '\''));

                // If we want to try and open the database local-only, throw an error
                // if we don't have the database locally

                if (!(options.localOnly && !haveDB)) {
                  _context18.next = 28;
                  break;
                }

                logger.warn('Database \'' + dbAddress + '\' doesn\'t exist!');
                throw new Error('Database \'' + dbAddress + '\' doesn\'t exist!');

              case 28:

                logger.debug('Loading Manifest for \'' + dbAddress + '\'');

                // Get the database manifest from IPFS
                _context18.next = 31;
                return io.read(this._ipfs, dbAddress.root);

              case 31:
                manifest = _context18.sent;

                logger.debug('Manifest for \'' + dbAddress + '\':\n' + (0, _stringify2.default)(manifest, null, 2));

                // Make sure the type from the manifest matches the type that was given as an option

                if (!(options.type && manifest.type !== options.type)) {
                  _context18.next = 35;
                  break;
                }

                throw new Error('Database \'' + dbAddress + '\' is type \'' + manifest.type + '\' but was opened as \'' + options.type + '\'');

              case 35:
                _context18.next = 37;
                return this._addManifestToCache(directory, dbAddress);

              case 37:

                // Open the the database
                options = (0, _assign2.default)({}, options, { accessControllerAddress: manifest.accessController });
                return _context18.abrupt('return', this._createStore(manifest.type, dbAddress, options));

              case 39:
              case 'end':
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function open(_x36) {
        return _ref18.apply(this, arguments);
      }

      return open;
    }()

    // Save the database locally

  }, {
    key: '_addManifestToCache',
    value: function () {
      var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(directory, dbAddress) {
        var cache;
        return _regenerator2.default.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return this._loadCache(directory, dbAddress);

              case 2:
                cache = _context19.sent;
                _context19.next = 5;
                return cache.set(path.join(dbAddress.toString(), '_manifest'), dbAddress.root);

              case 5:
                logger.debug('Saved manifest to IPFS as \'' + dbAddress.root + '\'');

              case 6:
              case 'end':
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function _addManifestToCache(_x37, _x38) {
        return _ref19.apply(this, arguments);
      }

      return _addManifestToCache;
    }()
  }, {
    key: '_loadCache',
    value: function () {
      var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20(directory, dbAddress) {
        var cache;
        return _regenerator2.default.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                cache = void 0;
                _context20.prev = 1;
                _context20.next = 4;
                return this.cache.load(directory, dbAddress);

              case 4:
                cache = _context20.sent;
                _context20.next = 11;
                break;

              case 7:
                _context20.prev = 7;
                _context20.t0 = _context20['catch'](1);

                console.log(_context20.t0);
                logger.error("Couldn't load Cache:", _context20.t0);

              case 11:
                return _context20.abrupt('return', cache);

              case 12:
              case 'end':
                return _context20.stop();
            }
          }
        }, _callee20, this, [[1, 7]]);
      }));

      function _loadCache(_x39, _x40) {
        return _ref20.apply(this, arguments);
      }

      return _loadCache;
    }()

    /**
     * Check if we have the database, or part of it, saved locally
     * @param  {[Cache]} cache [The OrbitDBCache instance containing the local data]
     * @param  {[OrbitDBAddress]} dbAddress [Address of the database to check]
     * @return {[Boolean]} [Returns true if we have cached the db locally, false if not]
     */

  }, {
    key: '_haveLocalData',
    value: function () {
      var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(cache, dbAddress) {
        var data;
        return _regenerator2.default.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                if (cache) {
                  _context21.next = 2;
                  break;
                }

                return _context21.abrupt('return', false);

              case 2:
                _context21.next = 4;
                return cache.get(path.join(dbAddress.toString(), '_manifest'));

              case 4:
                data = _context21.sent;
                return _context21.abrupt('return', data !== undefined && data !== null);

              case 6:
              case 'end':
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function _haveLocalData(_x41, _x42) {
        return _ref21.apply(this, arguments);
      }

      return _haveLocalData;
    }()

    /**
     * Returns supported database types as an Array of strings
     * Eg. [ 'counter', 'eventlog', 'feed', 'docstore', 'keyvalue']
     * @return {[Array]} [Supported database types]
     */

  }], [{
    key: 'createInstance',
    value: function () {
      var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(ipfs) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _ref23, id, directory, keystore, identity, orbitdb;

        return _regenerator2.default.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                if (isDefined(ipfs)) {
                  _context22.next = 2;
                  break;
                }

                throw new Error('IPFS is a required argument. See https://github.com/orbitdb/orbit-db/blob/master/API.md#createinstance');

              case 2:
                _context22.next = 4;
                return ipfs.id();

              case 4:
                _ref23 = _context22.sent;
                id = _ref23.id;
                directory = options.directory || './orbitdb';
                keystore = options.keystore || Keystore.create(path.join(directory, id, '/keystore'));
                _context22.t0 = options.identity;

                if (_context22.t0) {
                  _context22.next = 13;
                  break;
                }

                _context22.next = 12;
                return Identities.createIdentity({
                  id: options.id || id,
                  keystore: keystore
                });

              case 12:
                _context22.t0 = _context22.sent;

              case 13:
                identity = _context22.t0;

                options = (0, _assign2.default)({}, options, {
                  peerId: id,
                  directory: directory,
                  keystore: keystore
                });
                orbitdb = new OrbitDB(ipfs, identity, options);
                return _context22.abrupt('return', orbitdb);

              case 17:
              case 'end':
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function createInstance(_x44) {
        return _ref22.apply(this, arguments);
      }

      return createInstance;
    }()
  }, {
    key: 'isValidType',
    value: function isValidType(type) {
      return (0, _keys2.default)(databaseTypes).includes(type);
    }
  }, {
    key: 'addDatabaseType',
    value: function addDatabaseType(type, store) {
      if (databaseTypes[type]) throw new Error('Type already exists: ' + type);
      databaseTypes[type] = store;
    }
  }, {
    key: 'getDatabaseTypes',
    value: function getDatabaseTypes() {
      return databaseTypes;
    }
  }, {
    key: 'isValidAddress',
    value: function isValidAddress(address) {
      return OrbitDBAddress.isValid(address);
    }
  }, {
    key: 'parseAddress',
    value: function parseAddress(address) {
      return OrbitDBAddress.parse(address);
    }
  }, {
    key: 'databaseTypes',
    get: function get() {
      return (0, _keys2.default)(databaseTypes);
    }
  }]);
  return OrbitDB;
}();

module.exports = OrbitDB;