{
  "_args": [
    [
      "orbit-db-identity-provider@github:orbitdb/orbit-db-identity-provider",
      "/home/ptoner/repos/fantasybaseballleague/truffle/node_modules/orbit-db"
    ]
  ],
  "_from": "orbitdb/orbit-db-identity-provider",
  "_id": "orbit-db-identity-provider@0.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/orbit-db-identity-provider",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/orbitdb/orbit-db-identity-provider/master/package.json",
      "gitUrl": "git://github.com/orbitdb/orbit-db-identity-provider.git",
      "httpsUrl": "git+https://github.com/orbitdb/orbit-db-identity-provider.git",
      "shortcut": "github:orbitdb/orbit-db-identity-provider",
      "ssh": "git@github.com:orbitdb/orbit-db-identity-provider.git",
      "sshUrl": "git+ssh://git@github.com/orbitdb/orbit-db-identity-provider.git",
      "type": "github"
    },
    "name": "orbit-db-identity-provider",
    "raw": "orbit-db-identity-provider@github:orbitdb/orbit-db-identity-provider",
    "rawSpec": "github:orbitdb/orbit-db-identity-provider",
    "scope": null,
    "spec": "github:orbitdb/orbit-db-identity-provider",
    "type": "hosted"
  },
  "_requiredBy": [
    "/ipfs-log",
    "/orbit-db"
  ],
  "_resolved": "git://github.com/orbitdb/orbit-db-identity-provider.git#ec87a645292325d178537a98ed7bb1c67c0ac234",
  "_shasum": "14f11524a521a0da148f8d5e164b51724b7c064d",
  "_shrinkwrap": null,
  "_spec": "orbit-db-identity-provider@github:orbitdb/orbit-db-identity-provider",
  "_where": "/home/ptoner/repos/fantasybaseballleague/truffle/node_modules/orbit-db",
  "author": {
    "name": "shamb0t"
  },
  "bugs": {
    "url": "https://github.com/orbitdb/orbit-db-identity-provider/issues"
  },
  "contributors": [
    {
      "name": "shamb0t"
    },
    {
      "name": "haadcode"
    },
    {
      "name": "RichardLitt"
    },
    {
      "name": "latenssi"
    },
    {
      "name": "adam-palazzo"
    }
  ],
  "dependencies": {
    "ethers": "^4.0.20",
    "orbit-db-keystore": "github:orbitdb/orbit-db-keystore"
  },
  "description": "Default identity provider for OrbitDB",
  "devDependencies": {
    "mocha": "^5.2.0",
    "rimraf": "^2.6.2",
    "standard": "^12.0.1",
    "webpack": "^4.27.1",
    "webpack-cli": "^3.1.2"
  },
  "gitHead": "ec87a645292325d178537a98ed7bb1c67c0ac234",
  "homepage": "https://github.com/orbitdb/orbit-db-identity-provider#readme",
  "keywords": [
    "identity",
    "orbit-db",
    "orbitdb"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "orbit-db-identity-provider",
  "optionalDependencies": {},
  "readme": "# orbit-db-identity-provider\n\n[![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg)](https://gitter.im/orbitdb/Lobby)  \n[![npm version](https://badge.fury.io/js/orbit-db-identity-provider.svg)](https://www.npmjs.com/package/orbit-db-identity-provider)\n\n> Default identity provider for OrbitDB\n\n`Identities` is a package to manage identities in [@OrbitDB](http://github.com/orbitdb/orbit-db)\n\n## Table of Contents\n\n\t- [Install](#install)\n\t- [Usage](#usage)\n\t\t- [Creating an identity](#creating-an-identity)\n\t\t- [Adding a custom identity signer and verifier](#adding-a-custom-identity-signer-and-verifier)\n\t\t- [Properties](#properties)\n\t\t\t- [id](#id)\n\t\t\t- [publicKey](#publickey)\n\t\t\t- [signatures](#signatures)\n\t- [Contribute](#contribute)\n\t\t- [Tests](#tests)\n\t\t- [Build](#build)\n\t\t- [Linting](#linting)\n\t- [License](#license)\n\n## Install\n\nThis project uses [npm](https://npmjs.com/) and [nodejs](https://nodejs.org/)\n\n```sh\n$ npm i --save orbit-db-identity-provider\n```\n\n## Usage\n\nThe `Identity` object contains signatures proving possession of some external identifier and an OrbitDB public key. This is included to allow proof of ownership of an external identifier within OrbitDB.\n\n### Creating an identity\n```js\nconst Identities = require('orbit-db-identity-provider')\nconst options = { id: 'local-id'}\nconst identity = await Identities.createIdentity(options)\n\nconsole.log(identity.toJSON())\n// prints\n{\n  id: '045757bffcc7a4f4cf94c0cf214b3d3547a62195a09588df36b74aff837b2fdc14551360a323bf9de2ac8fb2eda9bd1bae5de53577a8db41ee2b46b4bf8cd7be33',\n  publicKey: '04b5c54ef8f2514a58338e64aa08aa6052c3cfef1225a10b51017f2ad63a92fb166e7a19cba44321c9402ab1b62c940cd5e65e81e4d584c1208dbd021f6e22c6f5',\n  signatures:  {\n    id: '3046022100aab534483f474bd3791eb9dcf1f61b6bdb4b07f70e8eca1ea7b530ac0ca13ca1022100e9d95eeeacc9813808400eb37f8aae6be7873df460d2a03e7a19132e34f0bd16',\n    publicKey: '30440220514b6fee38cbec96d9851905e575d6e209834c94be5e009a8261737d4ef23dfc0220794fa8dee564701d337b68fdbeef76bb81d777154c211d84ac345ec287a2a8e1'\n  },\n  type: 'orbitdb'\n}\n\n```\nIf `options.type` is not specified, Identities will default to creating an identity with type '`orbitdb'`, meaning the signing key will sign another OrbitDB public key. This public key can be an already-existing OrbitDB key allowing you to link several keys to a 'master' OrbitDB key to, for example, link keys across devices.\n\nTo use an existing keystore, you can pass it as an argument in the options as follows:\n```js\nconst identity = await Identities.createIdentity({ id: 'local-id', keystore: existingKeystore })\n```\n\n### Adding a custom identity signer and verifier\n\nTo link an OrbitDB signing key with an external identity, you must provide a custom class which implements the `IdentityProvider` [interface](https://github.com/orbitdb/orbit-db-identity-provider/blob/master/src/identity-provider-interface.js).\n\n```js\nclass MyIdentityProvider extends IdentityProvider {\n  static get type () { return 'MyIdentityType' } // return type\n  async getId () { } // return identifier of external id (eg. a public key)\n  async signIdentity (data) { } //return a signature of data (signature of the OrbtiDB public key)\n  static async verifyIdentity (identity) { } //return true if identity.sigantures are valid\n}\n\nIdentities.addIdentityProvider(MyIdentityProvider)\n\n// to create an identity of type `MyIdentityType`\nconst identity = await Identities.createIdentity({ type: `MyIdentityType`})\n\n```\n\n\n### Properties\n\n#### id\n\nReturns the ID of the external identity.\n\n#### publicKey\n\nReturns the signing key used to sign OrbitDB entries.\n\n#### signatures\nReturns an object containing two signatures\n```js\n{ id: <id-signature>, publicKey: <pub-key+id-siganture> }\n```\n\nThe first signature, `id`, is `identity.id` signed by `identiy.publicKey`. This allows the owner of `id` to prove they own the private key associated with `publicKey`. The second signature `publicKey` is created by signing the concatenation `identity.signature.id + identity.publicKey` using `identity.id`. This links the two identifiers.\n\n## Contribute\n\nPlease, feel free to contribute! Take a look at [the issues](https://github.com/orbitdb/orbit-db-identity-provider/issues), and comment on an existing issue or create a new one if you have questions, bugs, or suggestions. For larger PRs, open an issue first if you could - drive-by PRs are also welcomed.\n\nPlease abide by the [Code of Conduct](CODE_OF_CONDUCT.md). For more on contributing to [@OrbitDB](https://github.com/orbitdb/), check out the docs in [orbitdb/welcome](https://github.com/orbitdb/welcome).\n\n### Tests\n\nRun tests with:\n\n```sh\n$ npm test\n```\n\n### Build\n\nThe build script will build the distribution file for browsers.\n\n```sh\n$ npm run build\n```\n\n### Linting\n\nPlease use [`standard`](https://standardjs.com). To check,\n\n\n```sh\n$ npm run lint\n```\n\n## License\n\n[MIT](LICENSE) Â© 2018 Haja Networks Oy\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/orbitdb/orbit-db-identity-provider.git"
  },
  "scripts": {
    "build": "npm run build:dist",
    "build:dist": "webpack --config webpack.config.js --display-modules --sort-modules-by size --mode=production",
    "lint": "standard",
    "test": "mocha"
  },
  "standard": {
    "env": [
      "mocha"
    ]
  },
  "version": "0.0.3"
}
