{
  "_args": [
    [
      "orbit-db-store@github:orbitdb/orbit-db-store",
      "/home/ptoner/repos/fantasybaseballleague/truffle/node_modules/orbit-db"
    ]
  ],
  "_from": "orbitdb/orbit-db-store",
  "_id": "orbit-db-store@2.5.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/orbit-db-store",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "1.0.0",
    "process-nextick-args": "2.0.0",
    "safe-buffer": "5.1.2",
    "string_decoder": "1.1.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/orbitdb/orbit-db-store/master/package.json",
      "gitUrl": "git://github.com/orbitdb/orbit-db-store.git",
      "httpsUrl": "git+https://github.com/orbitdb/orbit-db-store.git",
      "shortcut": "github:orbitdb/orbit-db-store",
      "ssh": "git@github.com:orbitdb/orbit-db-store.git",
      "sshUrl": "git+ssh://git@github.com/orbitdb/orbit-db-store.git",
      "type": "github"
    },
    "name": "orbit-db-store",
    "raw": "orbit-db-store@github:orbitdb/orbit-db-store",
    "rawSpec": "github:orbitdb/orbit-db-store",
    "scope": null,
    "spec": "github:orbitdb/orbit-db-store",
    "type": "hosted"
  },
  "_requiredBy": [
    "/orbit-db",
    "/orbit-db-counterstore",
    "/orbit-db-docstore",
    "/orbit-db-eventstore",
    "/orbit-db-kvstore"
  ],
  "_resolved": "git://github.com/orbitdb/orbit-db-store.git#dbe97c923893e2b2cf0dbd2126778dd20bb04cb4",
  "_shasum": "496411c6692c6018dca0f16cc8c74383d6fa3881",
  "_shrinkwrap": null,
  "_spec": "orbit-db-store@github:orbitdb/orbit-db-store",
  "_where": "/home/ptoner/repos/fantasybaseballleague/truffle/node_modules/orbit-db",
  "author": {
    "name": "Haad"
  },
  "bugs": {
    "url": "https://github.com/orbitdb/orbit-db-store/issues"
  },
  "dependencies": {
    "ipfs-log": "github:orbitdb/ipfs-log",
    "logplease": "^1.2.14",
    "orbit-db-io": "~0.0.1",
    "p-each-series": "^1.0.0",
    "readable-stream": "~2.3.5"
  },
  "description": "Base class for orbit-db data stores",
  "devDependencies": {
    "standard": "^12.0.1"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "gitHead": "dbe97c923893e2b2cf0dbd2126778dd20bb04cb4",
  "homepage": "https://github.com/orbitdb/orbit-db-store#readme",
  "license": "MIT",
  "main": "src/Store.js",
  "name": "orbit-db-store",
  "optionalDependencies": {},
  "readme": "# orbit-db-store\n\n[![npm version](https://badge.fury.io/js/orbit-db-store.svg)](https://badge.fury.io/js/orbit-db-store)\n\nBase class for [orbit-db](https://github.com/orbitdb/orbit-db) data stores. You generally don't need to use this module if you want to use `orbit-db`. This module contains shared methods between all data stores in `orbit-db` and can be used as a base class for a new data model.\n\n### Used in\n- [orbit-db-kvstore](https://github.com/orbitdb/orbit-db-kvstore)\n- [orbit-db-eventstore](https://github.com/orbitdb/orbit-db-eventstore)\n- [orbit-db-feedstore](https://github.com/orbitdb/orbit-db-feedstore)\n- [orbit-db-counterstore](https://github.com/orbitdb/orbit-db-counterstore)\n- [orbit-db-docstore](https://github.com/orbitdb/orbit-db-docstore)\n\n### Requirements\n\n- Node.js >= 8.0.0\n\n### API\n\n#### Public methods\n\n##### `load(amount)`\n\nLoad the database using locally persisted state. Can specify how many entries to load with `amount` argument.\n\n##### `saveSnapshot()`\n\nSave the current state of the database locally. Returns a *Promise* that resolves to a IPFS Multihash as a Base58 encoded string. The the database can be loaded using this hash.\n\n##### `loadFromSnapshot(hash, onProgressCallback)`\n\nLoad the state of the database from a snapshot. *hash* is the IPFS Multihash of the snapshot data. Returns a *Promise* that resolves when the database has been loaded.\n\n##### `close()`\n\nUninitialize the store. Emits `close` after the store has been uninitialized.\n\n##### `drop()`\n\nRemove the database locally. This doesn't remove or delete the database from peers who have replicated the database.\n\n##### `sync(heads)`\n\nSync this database with entries from *heads* where *heads* is an array of ipfs-log Entries. Usually, you don't need to call this method manually as OrbitDB takes care of this for you.\n\n#### Properties\n\n##### `address`\n\nGet the address of this database. Returns an object `{ root: <manifestHash>, path: <path> }`. Convert to a string with `db.address.toString()`.\n\n```javascript\nconsole.log(db.address.toString())\n// /orbitdb/zdpuB383kQWjyCd5nv4FKqZwe2FH4nqxBBE7kzoDrmdtZ6GPu/databaseName\n```\n\n##### `identity`\n\nEach store has an `identity` property containing the public key used with this store to sign and access entries. This `publicKey` property of `identity` is the peer/node/user key.\n\n```javascript\nconsole.log(db.identity.publicKey)\n// 042c07044e7ea51a489c02854db5e09f0191690dc59db0afd95328c9db614a2976e088cab7c86d7e48183191258fc59dc699653508ce25bf0369d67f33d5d77839\n```\n\n##### `type`\n\nRemove all items from the local store. This doesn't remove or delete any entries in the distributed operations log.\n\n```javascript\nconsole.log(db.type) // \"eventlog\"\n```\n\n##### `replicationStatus`\n\nGet database replication status information such as total number of entries and loading progress.\n\n```javascript\nconsole.log(db.replicationStatus)\n// { buffered: 0, queued: 0, progress: 2, max: 5 }\n```\n\n### Events\n\n  Store has an `events` ([EventEmitter](https://nodejs.org/api/events.html)) object that emits events that describe what's happening in the database.\n\n  - `load` - (dbname, hash)\n\n    Emitted before loading the database history. *hash* is the hash from which the history is loaded.\n\n    ```javascript\n    db.events.on('load', (id, hash) => ... )\n    db.load()\n    ```\n\n  - `ready` - (dbname)\n\n    Emitted after fully loading the database history.\n\n    ```javascript\n    db.events.on('ready', (id) => ... )\n    db.load()\n    ```\n\n  - `load.progress` - (id, hash, entry, progress, total)\n\n    Emitted for each entry during load.\n\n    *Progress* is the current load count. *Total* is the maximum load count (ie. length of the full database). These are useful eg. for displaying a load progress percentage.\n\n    ```javascript\n    db.events.on('load.progress', (id, hash, entry, progress, total) => ... )\n    db.load()\n    ```\n\n  - `replicated` - (dbname)\n\n    Emitted after the database was synced with an update from a peer database.\n\n    ```javascript\n    db.events.on('replicated', (id, length) => ... )\n    ```\n\n  - `write` - (id, hash, entry)\n\n    Emitted after an entry was added locally to the database. *hash* is the IPFS hash of the latest state of the database. *entry* is the Entry that was added.\n\n    ```javascript\n    db.events.on('write', (id, hash, entry) => ... )\n    ```\n\n#### Private methods\n\n##### `_addOperation(data)`\n\nAdd an entry to the store. Takes `data` as a parameter which can be of any type.\n\n```javascript\nthis._addOperation({\n  op: 'PUT',\n  key: 'greeting',\n  value: 'hello world!'\n});\n```\n\n### Creating Custom Data Stores\nYou can create a custom data stores that stores data in a way you need it to. To do this, you need to import `orbit-db-store` to your custom store and extend your store class from orbit-db-store's `Store`. Below is the `orbit-db-kvstore` which is a custom data store for `orbit-db`.\n\n*TODO: describe indices and how they work*\n\n```javascript\nconst Store         = require('orbit-db-store');\nconst KeyValueIndex = require('./KeyValueIndex');\n\nclass KeyValueStore extends Store {\n  constructor(ipfs, identity, dbname, options) {\n    Object.assign(options || {}, { Index: KeyValueIndex });\n    super(ipfs, identity, dbname, options)\n  }\n\n  get(key) {\n    return this._index.get(key);\n  }\n\n  set(key, data) {\n    this.put(key, data);\n  }\n\n  put(key, data) {\n    return this._addOperation({\n      op: 'PUT',\n      key: key,\n      value: data,\n      meta: {\n        ts: new Date().getTime()\n      }\n    });\n  }\n\n  del(key) {\n    return this._addOperation({\n      op: 'DEL',\n      key: key,\n      value: null,\n      meta: {\n        ts: new Date().getTime()\n      }\n    });\n  }\n}\n\nmodule.exports = KeyValueStore;\n```\n\n## Contributing\n\nSee [orbit-db's contributing guideline](https://github.com/orbitdb/orbit-db#contributing).\n\n## License\n\n[MIT](LICENSE) ©️ 2016-2018 Protocol Labs Inc., Haja Networks Oy\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/orbitdb/orbit-db-store.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "standard": {
    "env": [
      "mocha"
    ]
  },
  "version": "2.5.3"
}
