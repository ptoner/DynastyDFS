'use strict';

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventEmitter = require('events').EventEmitter;
var AccessController = require('./access-controller');

var _require = require('./utils'),
    ensureAddress = _require.ensureAddress;

var Logger = require('logplease');
var logger = Logger.create("orbit-db-access-controller", { color: Logger.Colors.Red });

var OrbitDBAccessController = function (_EventEmitter) {
  (0, _inherits3.default)(OrbitDBAccessController, _EventEmitter);

  function OrbitDBAccessController(orbitdb) {
    (0, _classCallCheck3.default)(this, OrbitDBAccessController);

    var _this = (0, _possibleConstructorReturn3.default)(this, (OrbitDBAccessController.__proto__ || (0, _getPrototypeOf2.default)(OrbitDBAccessController)).call(this));

    _this._orbitdb = orbitdb;
    _this._db = null;
    _this.controllerType = 'orbitdb';
    return _this;
  }

  (0, _createClass3.default)(OrbitDBAccessController, [{
    key: 'get',
    value: function get(capability) {
      return this.capabilities[capability];
    }
  }, {
    key: 'close',
    value: async function close() {
      await this._db.close();
    }
  }, {
    key: 'load',
    value: async function load(address) {
      if (this._db) await this._db.close();

      this._db = await this._orbitdb.keyvalue(ensureAddress(address), {
        accessControllerType: 'ipfs', // the "root controller" is immutable, use ipfs controller
        sync: true,
        write: [this._orbitdb.key.getPublic('hex')]
      });

      this._db.events.on('ready', this._onUpdate.bind(this));
      this._db.events.on('write', this._onUpdate.bind(this));
      this._db.events.on('replicated', this._onUpdate.bind(this));

      await this._db.load();
    }
  }, {
    key: 'save',
    value: async function save() {
      return _promise2.default.resolve(this._db.address.toString());
    }
  }, {
    key: 'add',
    value: async function add(capability, key) {
      // Merge current keys with the new key
      var capabilities = new _set2.default([].concat((0, _toConsumableArray3.default)(this._db.get(capability) || []), [key]));
      await this._db.put(capability, (0, _from2.default)(capabilities));
    }
  }, {
    key: 'remove',
    value: async function remove(capability, key) {
      var capabilities = new _set2.default(this._db.get(capability) || []);
      capabilities.delete(key);
      if (capabilities.size > 0) {
        await this._db.put(capability, (0, _from2.default)(capabilities));
      } else {
        await this._db.del(capability);
      }
    }

    /* Private methods */

  }, {
    key: '_onUpdate',
    value: function _onUpdate() {
      this.emit('updated');
    }
  }, {
    key: 'capabilities',
    get: function get() {
      if (this._db) {
        // let capabilities = this._db.all()
        var capabilities = this._db._index._index;
        // Merge with the root controller access map
        (0, _entries2.default)(this._db.access.capabilities).forEach(function (e) {
          var key = e[0];
          var oldValue = capabilities[key] || [];
          capabilities[key] = (0, _from2.default)(new _set2.default([].concat((0, _toConsumableArray3.default)(oldValue), (0, _toConsumableArray3.default)(e[1]))));
        });
        return capabilities;
      }
      return {};
    }
  }]);
  return OrbitDBAccessController;
}(EventEmitter);

module.exports = OrbitDBAccessController;