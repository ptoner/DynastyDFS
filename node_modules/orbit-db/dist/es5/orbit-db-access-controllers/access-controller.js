'use strict';

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventEmitter = require('events').EventEmitter;

/**
 * Capabilities based access controller for OrbitDB
 */

var AccessController = function (_EventEmitter) {
  (0, _inherits3.default)(AccessController, _EventEmitter);

  function AccessController() {
    (0, _classCallCheck3.default)(this, AccessController);

    var _this = (0, _possibleConstructorReturn3.default)(this, (AccessController.__proto__ || (0, _getPrototypeOf2.default)(AccessController)).call(this));

    _this._capabilities = {};
    _this.controllerType = null;
    return _this;
  }

  /* Properties */


  (0, _createClass3.default)(AccessController, [{
    key: 'get',
    value: function get(capability) {
      return this.capabilities[capability];
    }

    /* Overridable functions */

  }, {
    key: 'load',
    value: async function load(address) {}
  }, {
    key: 'save',
    value: async function save() {}
  }, {
    key: 'init',
    value: async function init(name) {}
  }, {
    key: 'close',
    value: async function close() {}

    /**
     * Add capability
     *
     * Capabilities are an object that describe the capability,
     * ie. what CAN be done, and a key, ie. WHO can do it:
     * { capability: 'WRITE',      key: '04fGBa94Jjfow...' },
     * { capability: 'READ',       key: '04fGBa94Jjfow...' },
     * { capability: 'ADD_READ',   key: '04fGBa94Jjfow...' },
     * { capability: 'DEL_BY_KEY', key: '04fGBa94Jjfow...' }
      * @param {[String]} capability [Name of the capability to add the key to, eg. 'WRITE']
     * @param {[String]} key        [Authorization for the capabality, eg. a public key]
     */

  }, {
    key: 'add',
    value: async function add(capability, key) {}

    /**
     * Remove a capability
     * @param  {[String]} capability [Name of the capability to remove, eg. 'WRITE']
     * @param  {[String]} key        [Authorizsation to remove the capability from, eg. a public key]
     */

  }, {
    key: 'remove',
    value: async function remove(capability, key) {}
  }, {
    key: 'add',
    value: async function add(capability, key) {
      var capabilities = new _set2.default(this._capabilities[capability] || []);
      capabilities.add(key);
      this._capabilities[capability] = (0, _from2.default)(capabilities);
    }
  }, {
    key: 'remove',
    value: async function remove(capability, key) {
      var capabilities = new _set2.default(this._capabilities[capability] || []);
      capabilities.delete(key);
      if (capabilities.size === 0) delete this._capabilities[capability];else this._capabilities[capability] = (0, _from2.default)(capabilities);
    }
  }, {
    key: 'capabilities',
    get: function get() {
      return this._capabilities;
    }
  }]);
  return AccessController;
}(EventEmitter);

module.exports = AccessController;